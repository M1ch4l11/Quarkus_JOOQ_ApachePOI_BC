/*
 * This file is generated by jOOQ.
 */
package model.company;


import model.company.tables.Customers;
import model.company.tables.Employees;
import model.company.tables.Offices;
import model.company.tables.Orderdetails;
import model.company.tables.Orders;
import model.company.tables.Payments;
import model.company.tables.Productlines;
import model.company.tables.Products;
import model.company.tables.records.CustomersRecord;
import model.company.tables.records.EmployeesRecord;
import model.company.tables.records.OfficesRecord;
import model.company.tables.records.OrderdetailsRecord;
import model.company.tables.records.OrdersRecord;
import model.company.tables.records.PaymentsRecord;
import model.company.tables.records.ProductlinesRecord;
import model.company.tables.records.ProductsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * company.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CustomersRecord> CUSTOMERS_PKEY = Internal.createUniqueKey(Customers.CUSTOMERS, DSL.name("customers_pkey"), new TableField[] { Customers.CUSTOMERS.CUSTOMERNUMBER }, true);
    public static final UniqueKey<EmployeesRecord> EMPLOYEES_PKEY = Internal.createUniqueKey(Employees.EMPLOYEES, DSL.name("employees_pkey"), new TableField[] { Employees.EMPLOYEES.EMPLOYEENUMBER }, true);
    public static final UniqueKey<OfficesRecord> OFFICES_PKEY = Internal.createUniqueKey(Offices.OFFICES, DSL.name("offices_pkey"), new TableField[] { Offices.OFFICES.OFFICECODE }, true);
    public static final UniqueKey<OrderdetailsRecord> ORDERDETAILS_PKEY = Internal.createUniqueKey(Orderdetails.ORDERDETAILS, DSL.name("orderdetails_pkey"), new TableField[] { Orderdetails.ORDERDETAILS.ORDERNUMBER, Orderdetails.ORDERDETAILS.PRODUCTCODE }, true);
    public static final UniqueKey<OrdersRecord> ORDERS_PKEY = Internal.createUniqueKey(Orders.ORDERS, DSL.name("orders_pkey"), new TableField[] { Orders.ORDERS.ORDERNUMBER }, true);
    public static final UniqueKey<PaymentsRecord> PAYMENTS_PKEY = Internal.createUniqueKey(Payments.PAYMENTS, DSL.name("payments_pkey"), new TableField[] { Payments.PAYMENTS.CUSTOMERNUMBER, Payments.PAYMENTS.CHECKNUMBER }, true);
    public static final UniqueKey<ProductlinesRecord> PRODUCTLINES_PKEY = Internal.createUniqueKey(Productlines.PRODUCTLINES, DSL.name("productlines_pkey"), new TableField[] { Productlines.PRODUCTLINES.PRODUCTLINE }, true);
    public static final UniqueKey<ProductsRecord> PRODUCTS_PKEY = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("products_pkey"), new TableField[] { Products.PRODUCTS.PRODUCTCODE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CustomersRecord, EmployeesRecord> CUSTOMERS__CUSTOMERS_SALESREPEMPLOYEENUMBER_FKEY = Internal.createForeignKey(Customers.CUSTOMERS, DSL.name("customers_salesrepemployeenumber_fkey"), new TableField[] { Customers.CUSTOMERS.SALESREPEMPLOYEENUMBER }, Keys.EMPLOYEES_PKEY, new TableField[] { Employees.EMPLOYEES.EMPLOYEENUMBER }, true);
    public static final ForeignKey<EmployeesRecord, OfficesRecord> EMPLOYEES__EMPLOYEES_OFFICECODE_FKEY = Internal.createForeignKey(Employees.EMPLOYEES, DSL.name("employees_officecode_fkey"), new TableField[] { Employees.EMPLOYEES.OFFICECODE }, Keys.OFFICES_PKEY, new TableField[] { Offices.OFFICES.OFFICECODE }, true);
    public static final ForeignKey<OrderdetailsRecord, OrdersRecord> ORDERDETAILS__ORDERDETAILS_ORDERNUMBER_FKEY = Internal.createForeignKey(Orderdetails.ORDERDETAILS, DSL.name("orderdetails_ordernumber_fkey"), new TableField[] { Orderdetails.ORDERDETAILS.ORDERNUMBER }, Keys.ORDERS_PKEY, new TableField[] { Orders.ORDERS.ORDERNUMBER }, true);
    public static final ForeignKey<OrderdetailsRecord, ProductsRecord> ORDERDETAILS__ORDERDETAILS_PRODUCTCODE_FKEY = Internal.createForeignKey(Orderdetails.ORDERDETAILS, DSL.name("orderdetails_productcode_fkey"), new TableField[] { Orderdetails.ORDERDETAILS.PRODUCTCODE }, Keys.PRODUCTS_PKEY, new TableField[] { Products.PRODUCTS.PRODUCTCODE }, true);
    public static final ForeignKey<OrdersRecord, CustomersRecord> ORDERS__ORDERS_CUSTOMERNUMBER_FKEY = Internal.createForeignKey(Orders.ORDERS, DSL.name("orders_customernumber_fkey"), new TableField[] { Orders.ORDERS.CUSTOMERNUMBER }, Keys.CUSTOMERS_PKEY, new TableField[] { Customers.CUSTOMERS.CUSTOMERNUMBER }, true);
    public static final ForeignKey<PaymentsRecord, CustomersRecord> PAYMENTS__PAYMENTS_CUSTOMERNUMBER_FKEY = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("payments_customernumber_fkey"), new TableField[] { Payments.PAYMENTS.CUSTOMERNUMBER }, Keys.CUSTOMERS_PKEY, new TableField[] { Customers.CUSTOMERS.CUSTOMERNUMBER }, true);
    public static final ForeignKey<ProductsRecord, ProductlinesRecord> PRODUCTS__PRODUCTS_PRODUCTLINE_FKEY = Internal.createForeignKey(Products.PRODUCTS, DSL.name("products_productline_fkey"), new TableField[] { Products.PRODUCTS.PRODUCTLINE }, Keys.PRODUCTLINES_PKEY, new TableField[] { Productlines.PRODUCTLINES.PRODUCTLINE }, true);
}
