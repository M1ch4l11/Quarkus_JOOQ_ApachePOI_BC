/*
 * This file is generated by jOOQ.
 */
package model.company.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.company.Company;
import model.company.Keys;
import model.company.tables.records.CustomersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>company.customers.customernumber</code>.
     */
    public final TableField<CustomersRecord, Integer> CUSTOMERNUMBER = createField(DSL.name("customernumber"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>company.customers.customername</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMERNAME = createField(DSL.name("customername"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.contactlastname</code>.
     */
    public final TableField<CustomersRecord, String> CONTACTLASTNAME = createField(DSL.name("contactlastname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.contactfirstname</code>.
     */
    public final TableField<CustomersRecord, String> CONTACTFIRSTNAME = createField(DSL.name("contactfirstname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.phone</code>.
     */
    public final TableField<CustomersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.addressline1</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESSLINE1 = createField(DSL.name("addressline1"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.addressline2</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESSLINE2 = createField(DSL.name("addressline2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>company.customers.city</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.state</code>.
     */
    public final TableField<CustomersRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>company.customers.postalcode</code>.
     */
    public final TableField<CustomersRecord, String> POSTALCODE = createField(DSL.name("postalcode"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>company.customers.country</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.customers.salesrepemployeenumber</code>.
     */
    public final TableField<CustomersRecord, Integer> SALESREPEMPLOYEENUMBER = createField(DSL.name("salesrepemployeenumber"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>company.customers.creditlimit</code>.
     */
    public final TableField<CustomersRecord, BigDecimal> CREDITLIMIT = createField(DSL.name("creditlimit"), SQLDataType.NUMERIC, this, "");

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>company.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    /**
     * Create a <code>company.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    public <O extends Record> Customers(Table<O> child, ForeignKey<O, CustomersRecord> key) {
        super(child, key, CUSTOMERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Company.COMPANY;
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_PKEY;
    }

    @Override
    public List<ForeignKey<CustomersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CUSTOMERS__CUSTOMERS_SALESREPEMPLOYEENUMBER_FKEY);
    }

    private transient Employees _employees;

    /**
     * Get the implicit join path to the <code>company.employees</code> table.
     */
    public Employees employees() {
        if (_employees == null)
            _employees = new Employees(this, Keys.CUSTOMERS__CUSTOMERS_SALESREPEMPLOYEENUMBER_FKEY);

        return _employees;
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    @Override
    public Customers as(Table<?> alias) {
        return new Customers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Table<?> name) {
        return new Customers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, String, String, String, String, String, String, Integer, BigDecimal> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
