/*
 * This file is generated by jOOQ.
 */
package model.company.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.company.Company;
import model.company.Keys;
import model.company.tables.records.EmployeesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>company.employees.employeenumber</code>.
     */
    public final TableField<EmployeesRecord, Integer> EMPLOYEENUMBER = createField(DSL.name("employeenumber"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>company.employees.officecode</code>.
     */
    public final TableField<EmployeesRecord, String> OFFICECODE = createField(DSL.name("officecode"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>company.employees.lastname</code>.
     */
    public final TableField<EmployeesRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.employees.firstname</code>.
     */
    public final TableField<EmployeesRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.employees.extension</code>.
     */
    public final TableField<EmployeesRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>company.employees.email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>company.employees.reportsto</code>.
     */
    public final TableField<EmployeesRecord, Integer> REPORTSTO = createField(DSL.name("reportsto"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>company.employees.jobtitle</code>.
     */
    public final TableField<EmployeesRecord, String> JOBTITLE = createField(DSL.name("jobtitle"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>company.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    /**
     * Create a <code>company.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Company.COMPANY;
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.EMPLOYEES_PKEY;
    }

    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEES__EMPLOYEES_OFFICECODE_FKEY);
    }

    private transient Offices _offices;

    /**
     * Get the implicit join path to the <code>company.offices</code> table.
     */
    public Offices offices() {
        if (_offices == null)
            _offices = new Offices(this, Keys.EMPLOYEES__EMPLOYEES_OFFICECODE_FKEY);

        return _offices;
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    @Override
    public Employees as(Table<?> alias) {
        return new Employees(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Table<?> name) {
        return new Employees(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
