/*
 * This file is generated by jOOQ.
 */
package model.company.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.company.Company;
import model.company.Keys;
import model.company.tables.records.OrderdetailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orderdetails extends TableImpl<OrderdetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company.orderdetails</code>
     */
    public static final Orderdetails ORDERDETAILS = new Orderdetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderdetailsRecord> getRecordType() {
        return OrderdetailsRecord.class;
    }

    /**
     * The column <code>company.orderdetails.ordernumber</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> ORDERNUMBER = createField(DSL.name("ordernumber"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>company.orderdetails.productcode</code>.
     */
    public final TableField<OrderdetailsRecord, String> PRODUCTCODE = createField(DSL.name("productcode"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>company.orderdetails.quantityordered</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> QUANTITYORDERED = createField(DSL.name("quantityordered"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>company.orderdetails.priceeach</code>.
     */
    public final TableField<OrderdetailsRecord, BigDecimal> PRICEEACH = createField(DSL.name("priceeach"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>company.orderdetails.orderlinenumber</code>.
     */
    public final TableField<OrderdetailsRecord, Short> ORDERLINENUMBER = createField(DSL.name("orderlinenumber"), SQLDataType.SMALLINT.nullable(false), this, "");

    private Orderdetails(Name alias, Table<OrderdetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orderdetails(Name alias, Table<OrderdetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company.orderdetails</code> table reference
     */
    public Orderdetails(String alias) {
        this(DSL.name(alias), ORDERDETAILS);
    }

    /**
     * Create an aliased <code>company.orderdetails</code> table reference
     */
    public Orderdetails(Name alias) {
        this(alias, ORDERDETAILS);
    }

    /**
     * Create a <code>company.orderdetails</code> table reference
     */
    public Orderdetails() {
        this(DSL.name("orderdetails"), null);
    }

    public <O extends Record> Orderdetails(Table<O> child, ForeignKey<O, OrderdetailsRecord> key) {
        super(child, key, ORDERDETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Company.COMPANY;
    }

    @Override
    public UniqueKey<OrderdetailsRecord> getPrimaryKey() {
        return Keys.ORDERDETAILS_PKEY;
    }

    @Override
    public List<ForeignKey<OrderdetailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERDETAILS__ORDERDETAILS_ORDERNUMBER_FKEY, Keys.ORDERDETAILS__ORDERDETAILS_PRODUCTCODE_FKEY);
    }

    private transient Orders _orders;
    private transient Products _products;

    /**
     * Get the implicit join path to the <code>company.orders</code> table.
     */
    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ORDERDETAILS__ORDERDETAILS_ORDERNUMBER_FKEY);

        return _orders;
    }

    /**
     * Get the implicit join path to the <code>company.products</code> table.
     */
    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.ORDERDETAILS__ORDERDETAILS_PRODUCTCODE_FKEY);

        return _products;
    }

    @Override
    public Orderdetails as(String alias) {
        return new Orderdetails(DSL.name(alias), this);
    }

    @Override
    public Orderdetails as(Name alias) {
        return new Orderdetails(alias, this);
    }

    @Override
    public Orderdetails as(Table<?> alias) {
        return new Orderdetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orderdetails rename(String name) {
        return new Orderdetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orderdetails rename(Name name) {
        return new Orderdetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orderdetails rename(Table<?> name) {
        return new Orderdetails(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, BigDecimal, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super Integer, ? super BigDecimal, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super Integer, ? super BigDecimal, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
