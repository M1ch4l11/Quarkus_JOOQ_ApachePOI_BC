/*
 * This file is generated by jOOQ.
 */
package model.company.tables;


import java.util.function.Function;

import model.company.Company;
import model.company.Keys;
import model.company.tables.records.ProductlinesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productlines extends TableImpl<ProductlinesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company.productlines</code>
     */
    public static final Productlines PRODUCTLINES = new Productlines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductlinesRecord> getRecordType() {
        return ProductlinesRecord.class;
    }

    /**
     * The column <code>company.productlines.productline</code>.
     */
    public final TableField<ProductlinesRecord, String> PRODUCTLINE = createField(DSL.name("productline"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.productlines.textdescription</code>.
     */
    public final TableField<ProductlinesRecord, String> TEXTDESCRIPTION = createField(DSL.name("textdescription"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>company.productlines.htmldescription</code>.
     */
    public final TableField<ProductlinesRecord, String> HTMLDESCRIPTION = createField(DSL.name("htmldescription"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>company.productlines.image</code>.
     */
    public final TableField<ProductlinesRecord, byte[]> IMAGE = createField(DSL.name("image"), SQLDataType.BLOB, this, "");

    private Productlines(Name alias, Table<ProductlinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productlines(Name alias, Table<ProductlinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company.productlines</code> table reference
     */
    public Productlines(String alias) {
        this(DSL.name(alias), PRODUCTLINES);
    }

    /**
     * Create an aliased <code>company.productlines</code> table reference
     */
    public Productlines(Name alias) {
        this(alias, PRODUCTLINES);
    }

    /**
     * Create a <code>company.productlines</code> table reference
     */
    public Productlines() {
        this(DSL.name("productlines"), null);
    }

    public <O extends Record> Productlines(Table<O> child, ForeignKey<O, ProductlinesRecord> key) {
        super(child, key, PRODUCTLINES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Company.COMPANY;
    }

    @Override
    public UniqueKey<ProductlinesRecord> getPrimaryKey() {
        return Keys.PRODUCTLINES_PKEY;
    }

    @Override
    public Productlines as(String alias) {
        return new Productlines(DSL.name(alias), this);
    }

    @Override
    public Productlines as(Name alias) {
        return new Productlines(alias, this);
    }

    @Override
    public Productlines as(Table<?> alias) {
        return new Productlines(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productlines rename(String name) {
        return new Productlines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productlines rename(Name name) {
        return new Productlines(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productlines rename(Table<?> name) {
        return new Productlines(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
