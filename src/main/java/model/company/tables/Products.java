/*
 * This file is generated by jOOQ.
 */
package model.company.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.company.Company;
import model.company.Keys;
import model.company.tables.records.ProductsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>company.products.productcode</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTCODE = createField(DSL.name("productcode"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>company.products.productline</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTLINE = createField(DSL.name("productline"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.products.productname</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTNAME = createField(DSL.name("productname"), SQLDataType.VARCHAR(70).nullable(false), this, "");

    /**
     * The column <code>company.products.productscale</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTSCALE = createField(DSL.name("productscale"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>company.products.productvendor</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTVENDOR = createField(DSL.name("productvendor"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>company.products.productdescription</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTDESCRIPTION = createField(DSL.name("productdescription"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>company.products.quantityinstock</code>.
     */
    public final TableField<ProductsRecord, Short> QUANTITYINSTOCK = createField(DSL.name("quantityinstock"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>company.products.buyprice</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> BUYPRICE = createField(DSL.name("buyprice"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>company.products.msrp</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> MSRP = createField(DSL.name("msrp"), SQLDataType.NUMERIC.nullable(false), this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>company.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>company.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> child, ForeignKey<O, ProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Company.COMPANY;
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS__PRODUCTS_PRODUCTLINE_FKEY);
    }

    private transient Productlines _productlines;

    /**
     * Get the implicit join path to the <code>company.productlines</code>
     * table.
     */
    public Productlines productlines() {
        if (_productlines == null)
            _productlines = new Productlines(this, Keys.PRODUCTS__PRODUCTS_PRODUCTLINE_FKEY);

        return _productlines;
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    @Override
    public Products as(Table<?> alias) {
        return new Products(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Table<?> name) {
        return new Products(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, Short, BigDecimal, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
