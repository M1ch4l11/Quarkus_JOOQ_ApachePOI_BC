/*
 * This file is generated by jOOQ.
 */
package model.company.tables.records;


import java.time.LocalDateTime;

import model.company.tables.Orders;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersRecord extends UpdatableRecordImpl<OrdersRecord> implements Record7<Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>company.orders.ordernumber</code>.
     */
    public void setOrdernumber(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>company.orders.ordernumber</code>.
     */
    public Integer getOrdernumber() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>company.orders.customernumber</code>.
     */
    public void setCustomernumber(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>company.orders.customernumber</code>.
     */
    public Integer getCustomernumber() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>company.orders.orderdate</code>.
     */
    public void setOrderdate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>company.orders.orderdate</code>.
     */
    public LocalDateTime getOrderdate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>company.orders.requireddate</code>.
     */
    public void setRequireddate(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>company.orders.requireddate</code>.
     */
    public LocalDateTime getRequireddate() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>company.orders.shippeddate</code>.
     */
    public void setShippeddate(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>company.orders.shippeddate</code>.
     */
    public LocalDateTime getShippeddate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>company.orders.status</code>.
     */
    public void setStatus(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>company.orders.status</code>.
     */
    public String getStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>company.orders.comments</code>.
     */
    public void setComments(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>company.orders.comments</code>.
     */
    public String getComments() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Orders.ORDERS.ORDERNUMBER;
    }

    @Override
    public Field<Integer> field2() {
        return Orders.ORDERS.CUSTOMERNUMBER;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Orders.ORDERS.ORDERDATE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Orders.ORDERS.REQUIREDDATE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Orders.ORDERS.SHIPPEDDATE;
    }

    @Override
    public Field<String> field6() {
        return Orders.ORDERS.STATUS;
    }

    @Override
    public Field<String> field7() {
        return Orders.ORDERS.COMMENTS;
    }

    @Override
    public Integer component1() {
        return getOrdernumber();
    }

    @Override
    public Integer component2() {
        return getCustomernumber();
    }

    @Override
    public LocalDateTime component3() {
        return getOrderdate();
    }

    @Override
    public LocalDateTime component4() {
        return getRequireddate();
    }

    @Override
    public LocalDateTime component5() {
        return getShippeddate();
    }

    @Override
    public String component6() {
        return getStatus();
    }

    @Override
    public String component7() {
        return getComments();
    }

    @Override
    public Integer value1() {
        return getOrdernumber();
    }

    @Override
    public Integer value2() {
        return getCustomernumber();
    }

    @Override
    public LocalDateTime value3() {
        return getOrderdate();
    }

    @Override
    public LocalDateTime value4() {
        return getRequireddate();
    }

    @Override
    public LocalDateTime value5() {
        return getShippeddate();
    }

    @Override
    public String value6() {
        return getStatus();
    }

    @Override
    public String value7() {
        return getComments();
    }

    @Override
    public OrdersRecord value1(Integer value) {
        setOrdernumber(value);
        return this;
    }

    @Override
    public OrdersRecord value2(Integer value) {
        setCustomernumber(value);
        return this;
    }

    @Override
    public OrdersRecord value3(LocalDateTime value) {
        setOrderdate(value);
        return this;
    }

    @Override
    public OrdersRecord value4(LocalDateTime value) {
        setRequireddate(value);
        return this;
    }

    @Override
    public OrdersRecord value5(LocalDateTime value) {
        setShippeddate(value);
        return this;
    }

    @Override
    public OrdersRecord value6(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public OrdersRecord value7(String value) {
        setComments(value);
        return this;
    }

    @Override
    public OrdersRecord values(Integer value1, Integer value2, LocalDateTime value3, LocalDateTime value4, LocalDateTime value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdersRecord
     */
    public OrdersRecord() {
        super(Orders.ORDERS);
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    public OrdersRecord(Integer ordernumber, Integer customernumber, LocalDateTime orderdate, LocalDateTime requireddate, LocalDateTime shippeddate, String status, String comments) {
        super(Orders.ORDERS);

        setOrdernumber(ordernumber);
        setCustomernumber(customernumber);
        setOrderdate(orderdate);
        setRequireddate(requireddate);
        setShippeddate(shippeddate);
        setStatus(status);
        setComments(comments);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    public OrdersRecord(model.company.tables.pojos.Orders value) {
        super(Orders.ORDERS);

        if (value != null) {
            setOrdernumber(value.getOrdernumber());
            setCustomernumber(value.getCustomernumber());
            setOrderdate(value.getOrderdate());
            setRequireddate(value.getRequireddate());
            setShippeddate(value.getShippeddate());
            setStatus(value.getStatus());
            setComments(value.getComments());
            resetChangedOnNotNull();
        }
    }
}
