/*
 * This file is generated by jOOQ.
 */
package model.information_schema.tables;


import model.information_schema.InformationSchema;
import model.information_schema.tables.records.ElementTypesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementTypes extends TableImpl<ElementTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.element_types</code>
     */
    public static final ElementTypes ELEMENT_TYPES = new ElementTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementTypesRecord> getRecordType() {
        return ElementTypesRecord.class;
    }

    /**
     * The column <code>information_schema.element_types.object_catalog</code>.
     */
    public final TableField<ElementTypesRecord, String> OBJECT_CATALOG = createField(DSL.name("object_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.object_schema</code>.
     */
    public final TableField<ElementTypesRecord, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.object_name</code>.
     */
    public final TableField<ElementTypesRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.object_type</code>.
     */
    public final TableField<ElementTypesRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.collection_type_identifier</code>.
     */
    public final TableField<ElementTypesRecord, String> COLLECTION_TYPE_IDENTIFIER = createField(DSL.name("collection_type_identifier"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.data_type</code>.
     */
    public final TableField<ElementTypesRecord, String> DATA_TYPE = createField(DSL.name("data_type"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.character_maximum_length</code>.
     */
    public final TableField<ElementTypesRecord, Integer> CHARACTER_MAXIMUM_LENGTH = createField(DSL.name("character_maximum_length"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.character_octet_length</code>.
     */
    public final TableField<ElementTypesRecord, Integer> CHARACTER_OCTET_LENGTH = createField(DSL.name("character_octet_length"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.character_set_catalog</code>.
     */
    public final TableField<ElementTypesRecord, String> CHARACTER_SET_CATALOG = createField(DSL.name("character_set_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.character_set_schema</code>.
     */
    public final TableField<ElementTypesRecord, String> CHARACTER_SET_SCHEMA = createField(DSL.name("character_set_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.character_set_name</code>.
     */
    public final TableField<ElementTypesRecord, String> CHARACTER_SET_NAME = createField(DSL.name("character_set_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.collation_catalog</code>.
     */
    public final TableField<ElementTypesRecord, String> COLLATION_CATALOG = createField(DSL.name("collation_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.collation_schema</code>.
     */
    public final TableField<ElementTypesRecord, String> COLLATION_SCHEMA = createField(DSL.name("collation_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.collation_name</code>.
     */
    public final TableField<ElementTypesRecord, String> COLLATION_NAME = createField(DSL.name("collation_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.numeric_precision</code>.
     */
    public final TableField<ElementTypesRecord, Integer> NUMERIC_PRECISION = createField(DSL.name("numeric_precision"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.numeric_precision_radix</code>.
     */
    public final TableField<ElementTypesRecord, Integer> NUMERIC_PRECISION_RADIX = createField(DSL.name("numeric_precision_radix"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.numeric_scale</code>.
     */
    public final TableField<ElementTypesRecord, Integer> NUMERIC_SCALE = createField(DSL.name("numeric_scale"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.datetime_precision</code>.
     */
    public final TableField<ElementTypesRecord, Integer> DATETIME_PRECISION = createField(DSL.name("datetime_precision"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.interval_type</code>.
     */
    public final TableField<ElementTypesRecord, String> INTERVAL_TYPE = createField(DSL.name("interval_type"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.interval_precision</code>.
     */
    public final TableField<ElementTypesRecord, Integer> INTERVAL_PRECISION = createField(DSL.name("interval_precision"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.domain_default</code>.
     */
    public final TableField<ElementTypesRecord, String> DOMAIN_DEFAULT = createField(DSL.name("domain_default"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.udt_catalog</code>.
     */
    public final TableField<ElementTypesRecord, String> UDT_CATALOG = createField(DSL.name("udt_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.udt_schema</code>.
     */
    public final TableField<ElementTypesRecord, String> UDT_SCHEMA = createField(DSL.name("udt_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.udt_name</code>.
     */
    public final TableField<ElementTypesRecord, String> UDT_NAME = createField(DSL.name("udt_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.scope_catalog</code>.
     */
    public final TableField<ElementTypesRecord, String> SCOPE_CATALOG = createField(DSL.name("scope_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.scope_schema</code>.
     */
    public final TableField<ElementTypesRecord, String> SCOPE_SCHEMA = createField(DSL.name("scope_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.scope_name</code>.
     */
    public final TableField<ElementTypesRecord, String> SCOPE_NAME = createField(DSL.name("scope_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.element_types.maximum_cardinality</code>.
     */
    public final TableField<ElementTypesRecord, Integer> MAXIMUM_CARDINALITY = createField(DSL.name("maximum_cardinality"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.element_types.dtd_identifier</code>.
     */
    public final TableField<ElementTypesRecord, String> DTD_IDENTIFIER = createField(DSL.name("dtd_identifier"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private ElementTypes(Name alias, Table<ElementTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementTypes(Name alias, Table<ElementTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>information_schema.element_types</code> table
     * reference
     */
    public ElementTypes(String alias) {
        this(DSL.name(alias), ELEMENT_TYPES);
    }

    /**
     * Create an aliased <code>information_schema.element_types</code> table
     * reference
     */
    public ElementTypes(Name alias) {
        this(alias, ELEMENT_TYPES);
    }

    /**
     * Create a <code>information_schema.element_types</code> table reference
     */
    public ElementTypes() {
        this(DSL.name("element_types"), null);
    }

    public <O extends Record> ElementTypes(Table<O> child, ForeignKey<O, ElementTypesRecord> key) {
        super(child, key, ELEMENT_TYPES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ElementTypes as(String alias) {
        return new ElementTypes(DSL.name(alias), this);
    }

    @Override
    public ElementTypes as(Name alias) {
        return new ElementTypes(alias, this);
    }

    @Override
    public ElementTypes as(Table<?> alias) {
        return new ElementTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementTypes rename(String name) {
        return new ElementTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementTypes rename(Name name) {
        return new ElementTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementTypes rename(Table<?> name) {
        return new ElementTypes(name.getQualifiedName(), null);
    }
}
