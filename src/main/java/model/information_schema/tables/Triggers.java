/*
 * This file is generated by jOOQ.
 */
package model.information_schema.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import model.information_schema.InformationSchema;
import model.information_schema.tables.records.TriggersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Triggers extends TableImpl<TriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.triggers</code>
     */
    public static final Triggers TRIGGERS = new Triggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggersRecord> getRecordType() {
        return TriggersRecord.class;
    }

    /**
     * The column <code>information_schema.triggers.trigger_catalog</code>.
     */
    public final TableField<TriggersRecord, String> TRIGGER_CATALOG = createField(DSL.name("trigger_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.trigger_schema</code>.
     */
    public final TableField<TriggersRecord, String> TRIGGER_SCHEMA = createField(DSL.name("trigger_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.trigger_name</code>.
     */
    public final TableField<TriggersRecord, String> TRIGGER_NAME = createField(DSL.name("trigger_name"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.event_manipulation</code>.
     */
    public final TableField<TriggersRecord, String> EVENT_MANIPULATION = createField(DSL.name("event_manipulation"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.event_object_catalog</code>.
     */
    public final TableField<TriggersRecord, String> EVENT_OBJECT_CATALOG = createField(DSL.name("event_object_catalog"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.event_object_schema</code>.
     */
    public final TableField<TriggersRecord, String> EVENT_OBJECT_SCHEMA = createField(DSL.name("event_object_schema"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.event_object_table</code>.
     */
    public final TableField<TriggersRecord, String> EVENT_OBJECT_TABLE = createField(DSL.name("event_object_table"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.action_order</code>.
     */
    public final TableField<TriggersRecord, Integer> ACTION_ORDER = createField(DSL.name("action_order"), model.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.action_condition</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_CONDITION = createField(DSL.name("action_condition"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.action_statement</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_STATEMENT = createField(DSL.name("action_statement"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.action_orientation</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_ORIENTATION = createField(DSL.name("action_orientation"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.action_timing</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_TIMING = createField(DSL.name("action_timing"), model.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_table</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_REFERENCE_OLD_TABLE = createField(DSL.name("action_reference_old_table"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_table</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_REFERENCE_NEW_TABLE = createField(DSL.name("action_reference_new_table"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_row</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_REFERENCE_OLD_ROW = createField(DSL.name("action_reference_old_row"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_row</code>.
     */
    public final TableField<TriggersRecord, String> ACTION_REFERENCE_NEW_ROW = createField(DSL.name("action_reference_new_row"), model.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.triggers.created</code>.
     */
    public final TableField<TriggersRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), model.information_schema.Domains.TIME_STAMP.getDataType(), this, "");

    private Triggers(Name alias, Table<TriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Triggers(Name alias, Table<TriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    public Triggers(String alias) {
        this(DSL.name(alias), TRIGGERS);
    }

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    public Triggers(Name alias) {
        this(alias, TRIGGERS);
    }

    /**
     * Create a <code>information_schema.triggers</code> table reference
     */
    public Triggers() {
        this(DSL.name("triggers"), null);
    }

    public <O extends Record> Triggers(Table<O> child, ForeignKey<O, TriggersRecord> key) {
        super(child, key, TRIGGERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Triggers as(String alias) {
        return new Triggers(DSL.name(alias), this);
    }

    @Override
    public Triggers as(Name alias) {
        return new Triggers(alias, this);
    }

    @Override
    public Triggers as(Table<?> alias) {
        return new Triggers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Triggers rename(String name) {
        return new Triggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Triggers rename(Name name) {
        return new Triggers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Triggers rename(Table<?> name) {
        return new Triggers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, String, String, Integer, String, String, String, String, String, String, String, String, OffsetDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
