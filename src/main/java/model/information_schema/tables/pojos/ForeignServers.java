/*
 * This file is generated by jOOQ.
 */
package model.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignServers implements Serializable {

    private static final long serialVersionUID = 1L;

    private String foreignServerCatalog;
    private String foreignServerName;
    private String foreignDataWrapperCatalog;
    private String foreignDataWrapperName;
    private String foreignServerType;
    private String foreignServerVersion;
    private String authorizationIdentifier;

    public ForeignServers() {}

    public ForeignServers(ForeignServers value) {
        this.foreignServerCatalog = value.foreignServerCatalog;
        this.foreignServerName = value.foreignServerName;
        this.foreignDataWrapperCatalog = value.foreignDataWrapperCatalog;
        this.foreignDataWrapperName = value.foreignDataWrapperName;
        this.foreignServerType = value.foreignServerType;
        this.foreignServerVersion = value.foreignServerVersion;
        this.authorizationIdentifier = value.authorizationIdentifier;
    }

    public ForeignServers(
        String foreignServerCatalog,
        String foreignServerName,
        String foreignDataWrapperCatalog,
        String foreignDataWrapperName,
        String foreignServerType,
        String foreignServerVersion,
        String authorizationIdentifier
    ) {
        this.foreignServerCatalog = foreignServerCatalog;
        this.foreignServerName = foreignServerName;
        this.foreignDataWrapperCatalog = foreignDataWrapperCatalog;
        this.foreignDataWrapperName = foreignDataWrapperName;
        this.foreignServerType = foreignServerType;
        this.foreignServerVersion = foreignServerVersion;
        this.authorizationIdentifier = authorizationIdentifier;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_server_catalog</code>.
     */
    public String getForeignServerCatalog() {
        return this.foreignServerCatalog;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(String foreignServerCatalog) {
        this.foreignServerCatalog = foreignServerCatalog;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_server_name</code>.
     */
    public String getForeignServerName() {
        return this.foreignServerName;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_server_name</code>.
     */
    public void setForeignServerName(String foreignServerName) {
        this.foreignServerName = foreignServerName;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_data_wrapper_catalog</code>.
     */
    public String getForeignDataWrapperCatalog() {
        return this.foreignDataWrapperCatalog;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_data_wrapper_catalog</code>.
     */
    public void setForeignDataWrapperCatalog(String foreignDataWrapperCatalog) {
        this.foreignDataWrapperCatalog = foreignDataWrapperCatalog;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_data_wrapper_name</code>.
     */
    public String getForeignDataWrapperName() {
        return this.foreignDataWrapperName;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_data_wrapper_name</code>.
     */
    public void setForeignDataWrapperName(String foreignDataWrapperName) {
        this.foreignDataWrapperName = foreignDataWrapperName;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_server_type</code>.
     */
    public String getForeignServerType() {
        return this.foreignServerType;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_server_type</code>.
     */
    public void setForeignServerType(String foreignServerType) {
        this.foreignServerType = foreignServerType;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.foreign_server_version</code>.
     */
    public String getForeignServerVersion() {
        return this.foreignServerVersion;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.foreign_server_version</code>.
     */
    public void setForeignServerVersion(String foreignServerVersion) {
        this.foreignServerVersion = foreignServerVersion;
    }

    /**
     * Getter for
     * <code>information_schema.foreign_servers.authorization_identifier</code>.
     */
    public String getAuthorizationIdentifier() {
        return this.authorizationIdentifier;
    }

    /**
     * Setter for
     * <code>information_schema.foreign_servers.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(String authorizationIdentifier) {
        this.authorizationIdentifier = authorizationIdentifier;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ForeignServers other = (ForeignServers) obj;
        if (this.foreignServerCatalog == null) {
            if (other.foreignServerCatalog != null)
                return false;
        }
        else if (!this.foreignServerCatalog.equals(other.foreignServerCatalog))
            return false;
        if (this.foreignServerName == null) {
            if (other.foreignServerName != null)
                return false;
        }
        else if (!this.foreignServerName.equals(other.foreignServerName))
            return false;
        if (this.foreignDataWrapperCatalog == null) {
            if (other.foreignDataWrapperCatalog != null)
                return false;
        }
        else if (!this.foreignDataWrapperCatalog.equals(other.foreignDataWrapperCatalog))
            return false;
        if (this.foreignDataWrapperName == null) {
            if (other.foreignDataWrapperName != null)
                return false;
        }
        else if (!this.foreignDataWrapperName.equals(other.foreignDataWrapperName))
            return false;
        if (this.foreignServerType == null) {
            if (other.foreignServerType != null)
                return false;
        }
        else if (!this.foreignServerType.equals(other.foreignServerType))
            return false;
        if (this.foreignServerVersion == null) {
            if (other.foreignServerVersion != null)
                return false;
        }
        else if (!this.foreignServerVersion.equals(other.foreignServerVersion))
            return false;
        if (this.authorizationIdentifier == null) {
            if (other.authorizationIdentifier != null)
                return false;
        }
        else if (!this.authorizationIdentifier.equals(other.authorizationIdentifier))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.foreignServerCatalog == null) ? 0 : this.foreignServerCatalog.hashCode());
        result = prime * result + ((this.foreignServerName == null) ? 0 : this.foreignServerName.hashCode());
        result = prime * result + ((this.foreignDataWrapperCatalog == null) ? 0 : this.foreignDataWrapperCatalog.hashCode());
        result = prime * result + ((this.foreignDataWrapperName == null) ? 0 : this.foreignDataWrapperName.hashCode());
        result = prime * result + ((this.foreignServerType == null) ? 0 : this.foreignServerType.hashCode());
        result = prime * result + ((this.foreignServerVersion == null) ? 0 : this.foreignServerVersion.hashCode());
        result = prime * result + ((this.authorizationIdentifier == null) ? 0 : this.authorizationIdentifier.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ForeignServers (");

        sb.append(foreignServerCatalog);
        sb.append(", ").append(foreignServerName);
        sb.append(", ").append(foreignDataWrapperCatalog);
        sb.append(", ").append(foreignDataWrapperName);
        sb.append(", ").append(foreignServerType);
        sb.append(", ").append(foreignServerVersion);
        sb.append(", ").append(authorizationIdentifier);

        sb.append(")");
        return sb.toString();
    }
}
