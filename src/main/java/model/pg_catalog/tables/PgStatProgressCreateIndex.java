/*
 * This file is generated by jOOQ.
 */
package model.pg_catalog.tables;


import java.util.function.Function;

import model.pg_catalog.PgCatalog;
import model.pg_catalog.tables.records.PgStatProgressCreateIndexRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatProgressCreateIndex extends TableImpl<PgStatProgressCreateIndexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_stat_progress_create_index</code>
     */
    public static final PgStatProgressCreateIndex PG_STAT_PROGRESS_CREATE_INDEX = new PgStatProgressCreateIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatProgressCreateIndexRecord> getRecordType() {
        return PgStatProgressCreateIndexRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.pid</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.datid</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> DATID = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.datname</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, String> DATNAME = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.relid</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.index_relid</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> INDEX_RELID = createField(DSL.name("index_relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.command</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, String> COMMAND = createField(DSL.name("command"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_create_index.phase</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, String> PHASE = createField(DSL.name("phase"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.lockers_total</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> LOCKERS_TOTAL = createField(DSL.name("lockers_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.lockers_done</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> LOCKERS_DONE = createField(DSL.name("lockers_done"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.current_locker_pid</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> CURRENT_LOCKER_PID = createField(DSL.name("current_locker_pid"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.blocks_total</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> BLOCKS_TOTAL = createField(DSL.name("blocks_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.blocks_done</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> BLOCKS_DONE = createField(DSL.name("blocks_done"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.tuples_total</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> TUPLES_TOTAL = createField(DSL.name("tuples_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.tuples_done</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> TUPLES_DONE = createField(DSL.name("tuples_done"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.partitions_total</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> PARTITIONS_TOTAL = createField(DSL.name("partitions_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_create_index.partitions_done</code>.
     */
    public final TableField<PgStatProgressCreateIndexRecord, Long> PARTITIONS_DONE = createField(DSL.name("partitions_done"), SQLDataType.BIGINT, this, "");

    private PgStatProgressCreateIndex(Name alias, Table<PgStatProgressCreateIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatProgressCreateIndex(Name alias, Table<PgStatProgressCreateIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_create_index</code>
     * table reference
     */
    public PgStatProgressCreateIndex(String alias) {
        this(DSL.name(alias), PG_STAT_PROGRESS_CREATE_INDEX);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_create_index</code>
     * table reference
     */
    public PgStatProgressCreateIndex(Name alias) {
        this(alias, PG_STAT_PROGRESS_CREATE_INDEX);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_progress_create_index</code> table
     * reference
     */
    public PgStatProgressCreateIndex() {
        this(DSL.name("pg_stat_progress_create_index"), null);
    }

    public <O extends Record> PgStatProgressCreateIndex(Table<O> child, ForeignKey<O, PgStatProgressCreateIndexRecord> key) {
        super(child, key, PG_STAT_PROGRESS_CREATE_INDEX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatProgressCreateIndex as(String alias) {
        return new PgStatProgressCreateIndex(DSL.name(alias), this);
    }

    @Override
    public PgStatProgressCreateIndex as(Name alias) {
        return new PgStatProgressCreateIndex(alias, this);
    }

    @Override
    public PgStatProgressCreateIndex as(Table<?> alias) {
        return new PgStatProgressCreateIndex(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatProgressCreateIndex rename(String name) {
        return new PgStatProgressCreateIndex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatProgressCreateIndex rename(Name name) {
        return new PgStatProgressCreateIndex(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatProgressCreateIndex rename(Table<?> name) {
        return new PgStatProgressCreateIndex(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, Long, String, Long, Long, String, String, Long, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Integer, ? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Integer, ? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
