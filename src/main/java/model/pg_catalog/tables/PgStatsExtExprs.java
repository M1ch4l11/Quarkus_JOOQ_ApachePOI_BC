/*
 * This file is generated by jOOQ.
 */
package model.pg_catalog.tables;


import java.util.function.Function;

import model.pg_catalog.PgCatalog;
import model.pg_catalog.tables.records.PgStatsExtExprsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatsExtExprs extends TableImpl<PgStatsExtExprsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stats_ext_exprs</code>
     */
    public static final PgStatsExtExprs PG_STATS_EXT_EXPRS = new PgStatsExtExprs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatsExtExprsRecord> getRecordType() {
        return PgStatsExtExprsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.schemaname</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.tablename</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> TABLENAME = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stats_ext_exprs.statistics_schemaname</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> STATISTICS_SCHEMANAME = createField(DSL.name("statistics_schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.statistics_name</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> STATISTICS_NAME = createField(DSL.name("statistics_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.statistics_owner</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> STATISTICS_OWNER = createField(DSL.name("statistics_owner"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.expr</code>.
     */
    public final TableField<PgStatsExtExprsRecord, String> EXPR = createField(DSL.name("expr"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.null_frac</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float> NULL_FRAC = createField(DSL.name("null_frac"), SQLDataType.REAL, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.avg_width</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Integer> AVG_WIDTH = createField(DSL.name("avg_width"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.n_distinct</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float> N_DISTINCT = createField(DSL.name("n_distinct"), SQLDataType.REAL, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.most_common_vals</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Object[]> MOST_COMMON_VALS = createField(DSL.name("most_common_vals"), SQLDataType.OTHER.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.most_common_freqs</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float[]> MOST_COMMON_FREQS = createField(DSL.name("most_common_freqs"), SQLDataType.REAL.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.histogram_bounds</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Object[]> HISTOGRAM_BOUNDS = createField(DSL.name("histogram_bounds"), SQLDataType.OTHER.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.correlation</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float> CORRELATION = createField(DSL.name("correlation"), SQLDataType.REAL, this, "");

    /**
     * The column <code>pg_catalog.pg_stats_ext_exprs.most_common_elems</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Object[]> MOST_COMMON_ELEMS = createField(DSL.name("most_common_elems"), SQLDataType.OTHER.array(), this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stats_ext_exprs.most_common_elem_freqs</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float[]> MOST_COMMON_ELEM_FREQS = createField(DSL.name("most_common_elem_freqs"), SQLDataType.REAL.array(), this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stats_ext_exprs.elem_count_histogram</code>.
     */
    public final TableField<PgStatsExtExprsRecord, Float[]> ELEM_COUNT_HISTOGRAM = createField(DSL.name("elem_count_histogram"), SQLDataType.REAL.array(), this, "");

    private PgStatsExtExprs(Name alias, Table<PgStatsExtExprsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatsExtExprs(Name alias, Table<PgStatsExtExprsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext_exprs</code> table
     * reference
     */
    public PgStatsExtExprs(String alias) {
        this(DSL.name(alias), PG_STATS_EXT_EXPRS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext_exprs</code> table
     * reference
     */
    public PgStatsExtExprs(Name alias) {
        this(alias, PG_STATS_EXT_EXPRS);
    }

    /**
     * Create a <code>pg_catalog.pg_stats_ext_exprs</code> table reference
     */
    public PgStatsExtExprs() {
        this(DSL.name("pg_stats_ext_exprs"), null);
    }

    public <O extends Record> PgStatsExtExprs(Table<O> child, ForeignKey<O, PgStatsExtExprsRecord> key) {
        super(child, key, PG_STATS_EXT_EXPRS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatsExtExprs as(String alias) {
        return new PgStatsExtExprs(DSL.name(alias), this);
    }

    @Override
    public PgStatsExtExprs as(Name alias) {
        return new PgStatsExtExprs(alias, this);
    }

    @Override
    public PgStatsExtExprs as(Table<?> alias) {
        return new PgStatsExtExprs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatsExtExprs rename(String name) {
        return new PgStatsExtExprs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatsExtExprs rename(Name name) {
        return new PgStatsExtExprs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatsExtExprs rename(Table<?> name) {
        return new PgStatsExtExprs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, Float, Integer, Float, Object[], Float[], Object[], Float, Object[], Float[], Float[]> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Float, ? super Integer, ? super Float, ? super Object[], ? super Float[], ? super Object[], ? super Float, ? super Object[], ? super Float[], ? super Float[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Float, ? super Integer, ? super Float, ? super Object[], ? super Float[], ? super Object[], ? super Float, ? super Object[], ? super Float[], ? super Float[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
