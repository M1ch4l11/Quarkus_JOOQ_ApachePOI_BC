/*
 * This file is generated by jOOQ.
 */
package model.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.pg_catalog.Keys;
import model.pg_catalog.PgCatalog;
import model.pg_catalog.tables.records.PgSubscriptionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgSubscription extends TableImpl<PgSubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_subscription</code>
     */
    public static final PgSubscription PG_SUBSCRIPTION = new PgSubscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgSubscriptionRecord> getRecordType() {
        return PgSubscriptionRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_subscription.oid</code>.
     */
    public final TableField<PgSubscriptionRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subdbid</code>.
     */
    public final TableField<PgSubscriptionRecord, Long> SUBDBID = createField(DSL.name("subdbid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subname</code>.
     */
    public final TableField<PgSubscriptionRecord, String> SUBNAME = createField(DSL.name("subname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subowner</code>.
     */
    public final TableField<PgSubscriptionRecord, Long> SUBOWNER = createField(DSL.name("subowner"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subenabled</code>.
     */
    public final TableField<PgSubscriptionRecord, Boolean> SUBENABLED = createField(DSL.name("subenabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subbinary</code>.
     */
    public final TableField<PgSubscriptionRecord, Boolean> SUBBINARY = createField(DSL.name("subbinary"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.substream</code>.
     */
    public final TableField<PgSubscriptionRecord, Boolean> SUBSTREAM = createField(DSL.name("substream"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subslotname</code>.
     */
    public final TableField<PgSubscriptionRecord, String> SUBSLOTNAME = createField(DSL.name("subslotname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subsynccommit</code>.
     */
    public final TableField<PgSubscriptionRecord, String> SUBSYNCCOMMIT = createField(DSL.name("subsynccommit"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_subscription.subpublications</code>.
     */
    public final TableField<PgSubscriptionRecord, String[]> SUBPUBLICATIONS = createField(DSL.name("subpublications"), SQLDataType.CLOB.nullable(false).array(), this, "");

    private PgSubscription(Name alias, Table<PgSubscriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgSubscription(Name alias, Table<PgSubscriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_subscription</code> table reference
     */
    public PgSubscription(String alias) {
        this(DSL.name(alias), PG_SUBSCRIPTION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_subscription</code> table reference
     */
    public PgSubscription(Name alias) {
        this(alias, PG_SUBSCRIPTION);
    }

    /**
     * Create a <code>pg_catalog.pg_subscription</code> table reference
     */
    public PgSubscription() {
        this(DSL.name("pg_subscription"), null);
    }

    public <O extends Record> PgSubscription(Table<O> child, ForeignKey<O, PgSubscriptionRecord> key) {
        super(child, key, PG_SUBSCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgSubscriptionRecord> getPrimaryKey() {
        return Keys.PG_SUBSCRIPTION_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgSubscriptionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_SUBSCRIPTION_SUBNAME_INDEX);
    }

    @Override
    public PgSubscription as(String alias) {
        return new PgSubscription(DSL.name(alias), this);
    }

    @Override
    public PgSubscription as(Name alias) {
        return new PgSubscription(alias, this);
    }

    @Override
    public PgSubscription as(Table<?> alias) {
        return new PgSubscription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgSubscription rename(String name) {
        return new PgSubscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgSubscription rename(Name name) {
        return new PgSubscription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgSubscription rename(Table<?> name) {
        return new PgSubscription(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, Long, Boolean, Boolean, Boolean, String, String, String[]> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super String, ? super Long, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super String, ? super Long, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
