/*
 * This file is generated by jOOQ.
 */
package model.pg_catalog.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatUserTables implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long relid;
    private String schemaname;
    private String relname;
    private Long seqScan;
    private Long seqTupRead;
    private Long idxScan;
    private Long idxTupFetch;
    private Long nTupIns;
    private Long nTupUpd;
    private Long nTupDel;
    private Long nTupHotUpd;
    private Long nLiveTup;
    private Long nDeadTup;
    private Long nModSinceAnalyze;
    private Long nInsSinceVacuum;
    private OffsetDateTime lastVacuum;
    private OffsetDateTime lastAutovacuum;
    private OffsetDateTime lastAnalyze;
    private OffsetDateTime lastAutoanalyze;
    private Long vacuumCount;
    private Long autovacuumCount;
    private Long analyzeCount;
    private Long autoanalyzeCount;

    public PgStatUserTables() {}

    public PgStatUserTables(PgStatUserTables value) {
        this.relid = value.relid;
        this.schemaname = value.schemaname;
        this.relname = value.relname;
        this.seqScan = value.seqScan;
        this.seqTupRead = value.seqTupRead;
        this.idxScan = value.idxScan;
        this.idxTupFetch = value.idxTupFetch;
        this.nTupIns = value.nTupIns;
        this.nTupUpd = value.nTupUpd;
        this.nTupDel = value.nTupDel;
        this.nTupHotUpd = value.nTupHotUpd;
        this.nLiveTup = value.nLiveTup;
        this.nDeadTup = value.nDeadTup;
        this.nModSinceAnalyze = value.nModSinceAnalyze;
        this.nInsSinceVacuum = value.nInsSinceVacuum;
        this.lastVacuum = value.lastVacuum;
        this.lastAutovacuum = value.lastAutovacuum;
        this.lastAnalyze = value.lastAnalyze;
        this.lastAutoanalyze = value.lastAutoanalyze;
        this.vacuumCount = value.vacuumCount;
        this.autovacuumCount = value.autovacuumCount;
        this.analyzeCount = value.analyzeCount;
        this.autoanalyzeCount = value.autoanalyzeCount;
    }

    public PgStatUserTables(
        Long relid,
        String schemaname,
        String relname,
        Long seqScan,
        Long seqTupRead,
        Long idxScan,
        Long idxTupFetch,
        Long nTupIns,
        Long nTupUpd,
        Long nTupDel,
        Long nTupHotUpd,
        Long nLiveTup,
        Long nDeadTup,
        Long nModSinceAnalyze,
        Long nInsSinceVacuum,
        OffsetDateTime lastVacuum,
        OffsetDateTime lastAutovacuum,
        OffsetDateTime lastAnalyze,
        OffsetDateTime lastAutoanalyze,
        Long vacuumCount,
        Long autovacuumCount,
        Long analyzeCount,
        Long autoanalyzeCount
    ) {
        this.relid = relid;
        this.schemaname = schemaname;
        this.relname = relname;
        this.seqScan = seqScan;
        this.seqTupRead = seqTupRead;
        this.idxScan = idxScan;
        this.idxTupFetch = idxTupFetch;
        this.nTupIns = nTupIns;
        this.nTupUpd = nTupUpd;
        this.nTupDel = nTupDel;
        this.nTupHotUpd = nTupHotUpd;
        this.nLiveTup = nLiveTup;
        this.nDeadTup = nDeadTup;
        this.nModSinceAnalyze = nModSinceAnalyze;
        this.nInsSinceVacuum = nInsSinceVacuum;
        this.lastVacuum = lastVacuum;
        this.lastAutovacuum = lastAutovacuum;
        this.lastAnalyze = lastAnalyze;
        this.lastAutoanalyze = lastAutoanalyze;
        this.vacuumCount = vacuumCount;
        this.autovacuumCount = autovacuumCount;
        this.analyzeCount = analyzeCount;
        this.autoanalyzeCount = autoanalyzeCount;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.relid</code>.
     */
    public Long getRelid() {
        return this.relid;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.relid</code>.
     */
    public void setRelid(Long relid) {
        this.relid = relid;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.schemaname</code>.
     */
    public String getSchemaname() {
        return this.schemaname;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.schemaname</code>.
     */
    public void setSchemaname(String schemaname) {
        this.schemaname = schemaname;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.relname</code>.
     */
    public String getRelname() {
        return this.relname;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.relname</code>.
     */
    public void setRelname(String relname) {
        this.relname = relname;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.seq_scan</code>.
     */
    public Long getSeqScan() {
        return this.seqScan;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.seq_scan</code>.
     */
    public void setSeqScan(Long seqScan) {
        this.seqScan = seqScan;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.seq_tup_read</code>.
     */
    public Long getSeqTupRead() {
        return this.seqTupRead;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.seq_tup_read</code>.
     */
    public void setSeqTupRead(Long seqTupRead) {
        this.seqTupRead = seqTupRead;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.idx_scan</code>.
     */
    public Long getIdxScan() {
        return this.idxScan;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.idx_scan</code>.
     */
    public void setIdxScan(Long idxScan) {
        this.idxScan = idxScan;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.idx_tup_fetch</code>.
     */
    public Long getIdxTupFetch() {
        return this.idxTupFetch;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.idx_tup_fetch</code>.
     */
    public void setIdxTupFetch(Long idxTupFetch) {
        this.idxTupFetch = idxTupFetch;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_tup_ins</code>.
     */
    public Long getNTupIns() {
        return this.nTupIns;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_tup_ins</code>.
     */
    public void setNTupIns(Long nTupIns) {
        this.nTupIns = nTupIns;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_tup_upd</code>.
     */
    public Long getNTupUpd() {
        return this.nTupUpd;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_tup_upd</code>.
     */
    public void setNTupUpd(Long nTupUpd) {
        this.nTupUpd = nTupUpd;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_tup_del</code>.
     */
    public Long getNTupDel() {
        return this.nTupDel;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_tup_del</code>.
     */
    public void setNTupDel(Long nTupDel) {
        this.nTupDel = nTupDel;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_tup_hot_upd</code>.
     */
    public Long getNTupHotUpd() {
        return this.nTupHotUpd;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_tup_hot_upd</code>.
     */
    public void setNTupHotUpd(Long nTupHotUpd) {
        this.nTupHotUpd = nTupHotUpd;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_live_tup</code>.
     */
    public Long getNLiveTup() {
        return this.nLiveTup;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_live_tup</code>.
     */
    public void setNLiveTup(Long nLiveTup) {
        this.nLiveTup = nLiveTup;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.n_dead_tup</code>.
     */
    public Long getNDeadTup() {
        return this.nDeadTup;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.n_dead_tup</code>.
     */
    public void setNDeadTup(Long nDeadTup) {
        this.nDeadTup = nDeadTup;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_user_tables.n_mod_since_analyze</code>.
     */
    public Long getNModSinceAnalyze() {
        return this.nModSinceAnalyze;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_user_tables.n_mod_since_analyze</code>.
     */
    public void setNModSinceAnalyze(Long nModSinceAnalyze) {
        this.nModSinceAnalyze = nModSinceAnalyze;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_user_tables.n_ins_since_vacuum</code>.
     */
    public Long getNInsSinceVacuum() {
        return this.nInsSinceVacuum;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_user_tables.n_ins_since_vacuum</code>.
     */
    public void setNInsSinceVacuum(Long nInsSinceVacuum) {
        this.nInsSinceVacuum = nInsSinceVacuum;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.last_vacuum</code>.
     */
    public OffsetDateTime getLastVacuum() {
        return this.lastVacuum;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.last_vacuum</code>.
     */
    public void setLastVacuum(OffsetDateTime lastVacuum) {
        this.lastVacuum = lastVacuum;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.last_autovacuum</code>.
     */
    public OffsetDateTime getLastAutovacuum() {
        return this.lastAutovacuum;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.last_autovacuum</code>.
     */
    public void setLastAutovacuum(OffsetDateTime lastAutovacuum) {
        this.lastAutovacuum = lastAutovacuum;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.last_analyze</code>.
     */
    public OffsetDateTime getLastAnalyze() {
        return this.lastAnalyze;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.last_analyze</code>.
     */
    public void setLastAnalyze(OffsetDateTime lastAnalyze) {
        this.lastAnalyze = lastAnalyze;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.last_autoanalyze</code>.
     */
    public OffsetDateTime getLastAutoanalyze() {
        return this.lastAutoanalyze;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.last_autoanalyze</code>.
     */
    public void setLastAutoanalyze(OffsetDateTime lastAutoanalyze) {
        this.lastAutoanalyze = lastAutoanalyze;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.vacuum_count</code>.
     */
    public Long getVacuumCount() {
        return this.vacuumCount;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.vacuum_count</code>.
     */
    public void setVacuumCount(Long vacuumCount) {
        this.vacuumCount = vacuumCount;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.autovacuum_count</code>.
     */
    public Long getAutovacuumCount() {
        return this.autovacuumCount;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.autovacuum_count</code>.
     */
    public void setAutovacuumCount(Long autovacuumCount) {
        this.autovacuumCount = autovacuumCount;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.analyze_count</code>.
     */
    public Long getAnalyzeCount() {
        return this.analyzeCount;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.analyze_count</code>.
     */
    public void setAnalyzeCount(Long analyzeCount) {
        this.analyzeCount = analyzeCount;
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_user_tables.autoanalyze_count</code>.
     */
    public Long getAutoanalyzeCount() {
        return this.autoanalyzeCount;
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_user_tables.autoanalyze_count</code>.
     */
    public void setAutoanalyzeCount(Long autoanalyzeCount) {
        this.autoanalyzeCount = autoanalyzeCount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgStatUserTables other = (PgStatUserTables) obj;
        if (this.relid == null) {
            if (other.relid != null)
                return false;
        }
        else if (!this.relid.equals(other.relid))
            return false;
        if (this.schemaname == null) {
            if (other.schemaname != null)
                return false;
        }
        else if (!this.schemaname.equals(other.schemaname))
            return false;
        if (this.relname == null) {
            if (other.relname != null)
                return false;
        }
        else if (!this.relname.equals(other.relname))
            return false;
        if (this.seqScan == null) {
            if (other.seqScan != null)
                return false;
        }
        else if (!this.seqScan.equals(other.seqScan))
            return false;
        if (this.seqTupRead == null) {
            if (other.seqTupRead != null)
                return false;
        }
        else if (!this.seqTupRead.equals(other.seqTupRead))
            return false;
        if (this.idxScan == null) {
            if (other.idxScan != null)
                return false;
        }
        else if (!this.idxScan.equals(other.idxScan))
            return false;
        if (this.idxTupFetch == null) {
            if (other.idxTupFetch != null)
                return false;
        }
        else if (!this.idxTupFetch.equals(other.idxTupFetch))
            return false;
        if (this.nTupIns == null) {
            if (other.nTupIns != null)
                return false;
        }
        else if (!this.nTupIns.equals(other.nTupIns))
            return false;
        if (this.nTupUpd == null) {
            if (other.nTupUpd != null)
                return false;
        }
        else if (!this.nTupUpd.equals(other.nTupUpd))
            return false;
        if (this.nTupDel == null) {
            if (other.nTupDel != null)
                return false;
        }
        else if (!this.nTupDel.equals(other.nTupDel))
            return false;
        if (this.nTupHotUpd == null) {
            if (other.nTupHotUpd != null)
                return false;
        }
        else if (!this.nTupHotUpd.equals(other.nTupHotUpd))
            return false;
        if (this.nLiveTup == null) {
            if (other.nLiveTup != null)
                return false;
        }
        else if (!this.nLiveTup.equals(other.nLiveTup))
            return false;
        if (this.nDeadTup == null) {
            if (other.nDeadTup != null)
                return false;
        }
        else if (!this.nDeadTup.equals(other.nDeadTup))
            return false;
        if (this.nModSinceAnalyze == null) {
            if (other.nModSinceAnalyze != null)
                return false;
        }
        else if (!this.nModSinceAnalyze.equals(other.nModSinceAnalyze))
            return false;
        if (this.nInsSinceVacuum == null) {
            if (other.nInsSinceVacuum != null)
                return false;
        }
        else if (!this.nInsSinceVacuum.equals(other.nInsSinceVacuum))
            return false;
        if (this.lastVacuum == null) {
            if (other.lastVacuum != null)
                return false;
        }
        else if (!this.lastVacuum.equals(other.lastVacuum))
            return false;
        if (this.lastAutovacuum == null) {
            if (other.lastAutovacuum != null)
                return false;
        }
        else if (!this.lastAutovacuum.equals(other.lastAutovacuum))
            return false;
        if (this.lastAnalyze == null) {
            if (other.lastAnalyze != null)
                return false;
        }
        else if (!this.lastAnalyze.equals(other.lastAnalyze))
            return false;
        if (this.lastAutoanalyze == null) {
            if (other.lastAutoanalyze != null)
                return false;
        }
        else if (!this.lastAutoanalyze.equals(other.lastAutoanalyze))
            return false;
        if (this.vacuumCount == null) {
            if (other.vacuumCount != null)
                return false;
        }
        else if (!this.vacuumCount.equals(other.vacuumCount))
            return false;
        if (this.autovacuumCount == null) {
            if (other.autovacuumCount != null)
                return false;
        }
        else if (!this.autovacuumCount.equals(other.autovacuumCount))
            return false;
        if (this.analyzeCount == null) {
            if (other.analyzeCount != null)
                return false;
        }
        else if (!this.analyzeCount.equals(other.analyzeCount))
            return false;
        if (this.autoanalyzeCount == null) {
            if (other.autoanalyzeCount != null)
                return false;
        }
        else if (!this.autoanalyzeCount.equals(other.autoanalyzeCount))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.relid == null) ? 0 : this.relid.hashCode());
        result = prime * result + ((this.schemaname == null) ? 0 : this.schemaname.hashCode());
        result = prime * result + ((this.relname == null) ? 0 : this.relname.hashCode());
        result = prime * result + ((this.seqScan == null) ? 0 : this.seqScan.hashCode());
        result = prime * result + ((this.seqTupRead == null) ? 0 : this.seqTupRead.hashCode());
        result = prime * result + ((this.idxScan == null) ? 0 : this.idxScan.hashCode());
        result = prime * result + ((this.idxTupFetch == null) ? 0 : this.idxTupFetch.hashCode());
        result = prime * result + ((this.nTupIns == null) ? 0 : this.nTupIns.hashCode());
        result = prime * result + ((this.nTupUpd == null) ? 0 : this.nTupUpd.hashCode());
        result = prime * result + ((this.nTupDel == null) ? 0 : this.nTupDel.hashCode());
        result = prime * result + ((this.nTupHotUpd == null) ? 0 : this.nTupHotUpd.hashCode());
        result = prime * result + ((this.nLiveTup == null) ? 0 : this.nLiveTup.hashCode());
        result = prime * result + ((this.nDeadTup == null) ? 0 : this.nDeadTup.hashCode());
        result = prime * result + ((this.nModSinceAnalyze == null) ? 0 : this.nModSinceAnalyze.hashCode());
        result = prime * result + ((this.nInsSinceVacuum == null) ? 0 : this.nInsSinceVacuum.hashCode());
        result = prime * result + ((this.lastVacuum == null) ? 0 : this.lastVacuum.hashCode());
        result = prime * result + ((this.lastAutovacuum == null) ? 0 : this.lastAutovacuum.hashCode());
        result = prime * result + ((this.lastAnalyze == null) ? 0 : this.lastAnalyze.hashCode());
        result = prime * result + ((this.lastAutoanalyze == null) ? 0 : this.lastAutoanalyze.hashCode());
        result = prime * result + ((this.vacuumCount == null) ? 0 : this.vacuumCount.hashCode());
        result = prime * result + ((this.autovacuumCount == null) ? 0 : this.autovacuumCount.hashCode());
        result = prime * result + ((this.analyzeCount == null) ? 0 : this.analyzeCount.hashCode());
        result = prime * result + ((this.autoanalyzeCount == null) ? 0 : this.autoanalyzeCount.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgStatUserTables (");

        sb.append(relid);
        sb.append(", ").append(schemaname);
        sb.append(", ").append(relname);
        sb.append(", ").append(seqScan);
        sb.append(", ").append(seqTupRead);
        sb.append(", ").append(idxScan);
        sb.append(", ").append(idxTupFetch);
        sb.append(", ").append(nTupIns);
        sb.append(", ").append(nTupUpd);
        sb.append(", ").append(nTupDel);
        sb.append(", ").append(nTupHotUpd);
        sb.append(", ").append(nLiveTup);
        sb.append(", ").append(nDeadTup);
        sb.append(", ").append(nModSinceAnalyze);
        sb.append(", ").append(nInsSinceVacuum);
        sb.append(", ").append(lastVacuum);
        sb.append(", ").append(lastAutovacuum);
        sb.append(", ").append(lastAnalyze);
        sb.append(", ").append(lastAutoanalyze);
        sb.append(", ").append(vacuumCount);
        sb.append(", ").append(autovacuumCount);
        sb.append(", ").append(analyzeCount);
        sb.append(", ").append(autoanalyzeCount);

        sb.append(")");
        return sb.toString();
    }
}
